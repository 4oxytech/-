import numpy as np
import matplotlib.pyplot as plt

N = 5 #У нас будет по пять образов для одного и второго класса

x1 = np.random.random(N)#Моделируем случайные величины по одной оси
x2 = x1 + [np.random.randint(10)/10 for _ in range(N)]
c1 = [x1, x2]#Двухмерный список, состоящий из набора этих точек
#Смоделированные точки х1 и х2 будут лежать выше нашей прямой

#Тоже самое делаем для второго класс
x1 = np.random.random(N)
x2 = x1 - [np.random.randint(10)/10 for i in range(N)] - 0.1#Здесь вычитаем 0.1, чтобы точка х2 была точно ниже нашей прямой
c2 = [x1, x2]#При х < 0 должен получаться класс с2

f = [0, 1] #Прямая под 45 градусов

w = np.array ([-0.3, 0.3]) #задаём веса для нашей неросети
for i in range(N):
    x = np.array([c1[0][i], c1[1][i]])#Перебираем все образы для класса с2, для второго класса
    y = np.dot(w, x)#Вычисляем выходное значение
    if y >= 0:
        print("Class 1")
    else:
        print("class 2")


#Отображаем наши точки
plt.scatter(c1[0][:], c1[1][:], s=10, c='red')
plt.scatter(c2[0][:], c2[1][:], s=10, c='blue')
plt.plot(f)#Разделяющая прямая
plt.grid(True)
plt.show()

#Со смещением bias
# import numpy as np
# import matplotlib.pyplot as plt
#
# N = 5 #У нас будет по пять образов для одного и второго класса
# b = 3 #Это смещение
#
# x1 = np.random.random(N)#Моделируем случайные величины по одной оси
# x2 = x1 + [np.random.randint(10)/10 for i in range(N)] + b
# c1 = [x1, x2]#Двумерный список, состоящий из набора этих точек
# #Смоделированные точки х1 и х2 будут лежать выше нашей прямой
#
# #Тоже самое делаем для второго класс
# x1 = np.random.random(N)
# x2 = x1 - [np.random.randint(10)/10 for _ in range(N)] - 0.1 + b#Здесь вычитаем 0.1, чтобы точка х2 была точно ниже нашей прямой
# c2 = [x1, x2]#При х < 0 должен получаться класс с2
#
# f = [0+b, 1+b] #Прямая как будет выглядеть со смещением
#
# w2 = 0.5 #Коэффиценты омега 2
# w3 = -b*w2 #зная коэффицент омега 2 мы можем вычеслить омегу 3
# w = np.array([-w2, w2, w3]) #задаём веса для нашей неросети
# for i in range(N):
#     x = np.array([c1[0][i], c1[1][i]]) #Перебираем все образы для класса с2, для второго класса
#     y = np.dot(w, x) #Вычисляем выходное значение
#     if y >= 0:
#         print("Class 1")
#     else:
#         print("class 2")
#
#
# #Отображаем наши точки
# plt.scatter(c1[0][:], c1[1][:], s=10, c='red')
# plt.scatter(c2[0][:], c2[1][:], s=10, c='blue')
# plt.plot(f) #Разделяющая прямая
# plt.grid(True)
# plt.show()